$date
	Fri Nov  6 23:25:16 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! Q2 [3:0] $end
$var wire 4 " Q1 [3:0] $end
$var wire 8 # B [7:0] $end
$var reg 1 $ Clk $end
$var reg 1 % En $end
$var reg 1 & En2 $end
$var reg 12 ' load [11:0] $end
$var reg 1 ( non $end
$var reg 1 ) reset $end
$scope module U1 $end
$var wire 1 $ Clk $end
$var wire 1 % En $end
$var wire 1 & En2 $end
$var wire 12 * load [11:0] $end
$var wire 1 ( non $end
$var wire 1 ) reset $end
$var wire 4 + Q2 [3:0] $end
$var wire 4 , Q1 [3:0] $end
$var wire 8 - B [7:0] $end
$var wire 12 . A [11:0] $end
$scope module U1 $end
$var wire 1 $ Clk $end
$var wire 1 % En $end
$var wire 12 / load [11:0] $end
$var wire 1 ( non $end
$var wire 1 ) reset $end
$var reg 12 0 exit [11:0] $end
$upscope $end
$scope module U2 $end
$var wire 8 1 data [7:0] $end
$var wire 12 2 lecture [11:0] $end
$upscope $end
$scope module U3 $end
$var wire 1 $ Clk $end
$var wire 8 3 D4 [7:0] $end
$var wire 1 & En2 $end
$var wire 1 ) reset $end
$var wire 4 4 Q2 [3:0] $end
$var wire 4 5 Q1 [3:0] $end
$scope module U1 $end
$var wire 1 $ Clk $end
$var wire 4 6 D [3:0] $end
$var wire 1 & En $end
$var wire 1 ) reset $end
$var reg 4 7 Q [3:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 $ Clk $end
$var wire 4 8 D [3:0] $end
$var wire 1 & En $end
$var wire 1 ) reset $end
$var reg 4 9 Q [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
bx '
x&
x%
x$
bx #
bx "
bx !
$end
#1
b0 '
b0 *
b0 /
0&
0(
0%
0)
0$
#2
1$
#3
b0 6
b11 8
b11 #
b11 -
b11 1
b11 3
b0 .
b0 0
b0 2
b0 !
b0 +
b0 4
b0 9
b0 "
b0 ,
b0 5
b0 7
0$
1)
#4
1$
#5
0$
0)
#6
1$
#7
0$
1%
#8
b1 6
b0 8
b10000 #
b10000 -
b10000 1
b10000 3
b1 .
b1 0
b1 2
1$
#9
0$
1&
#10
b10 6
b1 8
b100001 #
b100001 -
b100001 1
b100001 3
b10 .
b10 0
b10 2
b1 "
b1 ,
b1 5
b1 7
1$
#11
b101 6
b10 8
b1010010 #
b1010010 -
b1010010 1
b1010010 3
b11 .
b11 0
b11 2
0$
1(
#12
b1010 6
b1 8
b10100001 #
b10100001 -
b10100001 1
b10100001 3
b100 .
b100 0
b100 2
b101 "
b101 ,
b101 5
b101 7
b10 !
b10 +
b10 4
b10 9
1$
#13
0$
b1 '
b1 *
b1 /
#14
b1100 6
b1100 8
b11001100 #
b11001100 -
b11001100 1
b11001100 3
b101 .
b101 0
b101 2
b1 !
b1 +
b1 4
b1 9
b1010 "
b1010 ,
b1010 5
b1010 7
1$
#15
0$
b1010 '
b1010 *
b1010 /
#16
b1001 6
b110 8
b10010110 #
b10010110 -
b10010110 1
b10010110 3
b110 .
b110 0
b110 2
b1100 "
b1100 ,
b1100 5
b1100 7
b1100 !
b1100 +
b1100 4
b1100 9
1$
#17
0$
0(
#18
b110 6
b1001 8
b1101001 #
b1101001 -
b1101001 1
b1101001 3
b111 .
b111 0
b111 2
b110 !
b110 +
b110 4
b110 9
b1001 "
b1001 ,
b1001 5
b1001 7
1$
#19
b1001 6
b10011001 #
b10011001 -
b10011001 1
b10011001 3
b1000 .
b1000 0
b1000 2
0$
1(
#20
b110 6
b110 8
b1100110 #
b1100110 -
b1100110 1
b1100110 3
b1001 .
b1001 0
b1001 2
b1001 !
b1001 +
b1001 4
b1001 9
1$
#21
0$
b111001010 '
b111001010 *
b111001010 /
#22
b1110 6
b11 8
b11100011 #
b11100011 -
b11100011 1
b11100011 3
b1010 .
b1010 0
b1010 2
b110 !
b110 +
b110 4
b110 9
b110 "
b110 ,
b110 5
b110 7
1$
#23
0$
b110001001010 '
b110001001010 *
b110001001010 /
#24
bx 6
bx 8
bx #
bx -
bx 1
bx 3
b1011 .
b1011 0
b1011 2
b1110 "
b1110 ,
b1110 5
b1110 7
b11 !
b11 +
b11 4
b11 9
1$
#25
0$
