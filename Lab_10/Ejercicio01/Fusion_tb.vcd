$date
	Thu Nov  5 21:49:24 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! Q2 [3:0] $end
$var wire 4 " Q1 [3:0] $end
$var reg 1 # Clk $end
$var reg 1 $ En $end
$var reg 1 % En2 $end
$var reg 12 & load [11:0] $end
$var reg 1 ' non $end
$var reg 1 ( reset $end
$scope module U1 $end
$var wire 1 # Clk $end
$var wire 1 $ En $end
$var wire 1 % En2 $end
$var wire 12 ) load [11:0] $end
$var wire 1 ' non $end
$var wire 1 ( reset $end
$var wire 4 * Q2 [3:0] $end
$var wire 4 + Q1 [3:0] $end
$var wire 8 , B [7:0] $end
$var wire 12 - A [11:0] $end
$scope module U1 $end
$var wire 1 # Clk $end
$var wire 1 $ En $end
$var wire 12 . load [11:0] $end
$var wire 1 ' non $end
$var wire 1 ( reset $end
$var reg 12 / exit [11:0] $end
$upscope $end
$scope module U2 $end
$var wire 8 0 data [7:0] $end
$var wire 12 1 lecture [11:0] $end
$upscope $end
$scope module U3 $end
$var wire 1 # Clk $end
$var wire 8 2 D4 [7:0] $end
$var wire 1 % En2 $end
$var wire 1 ( reset $end
$var wire 4 3 Q2 [3:0] $end
$var wire 4 4 Q1 [3:0] $end
$scope module U1 $end
$var wire 1 # Clk $end
$var wire 4 5 D [3:0] $end
$var wire 1 % En $end
$var wire 1 ( reset $end
$var reg 4 6 Q [3:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 # Clk $end
$var wire 4 7 D [3:0] $end
$var wire 1 % En $end
$var wire 1 ( reset $end
$var reg 4 8 Q [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
x(
x'
bx &
x%
x$
x#
bx "
bx !
$end
#1
b0 &
b0 )
b0 .
0%
0'
0$
0(
0#
#5
1#
#10
0#
#11
b0 5
b11 7
b11 ,
b11 0
b11 2
b0 -
b0 /
b0 1
b0 !
b0 *
b0 3
b0 8
b0 "
b0 +
b0 4
b0 6
1(
#15
1#
#20
0#
#21
0(
#25
1#
#30
0#
#31
1$
#35
b1 5
b0 7
b10000 ,
b10000 0
b10000 2
b1 -
b1 /
b1 1
1#
#40
0#
#41
1%
#45
b10 5
b1 7
b100001 ,
b100001 0
b100001 2
b10 -
b10 /
b10 1
b1 "
b1 +
b1 4
b1 6
1#
#50
0#
#51
b101 5
b10 7
b1010010 ,
b1010010 0
b1010010 2
b11 -
b11 /
b11 1
1'
#55
b1010 5
b1 7
b10100001 ,
b10100001 0
b10100001 2
b100 -
b100 /
b100 1
b101 "
b101 +
b101 4
b101 6
b10 !
b10 *
b10 3
b10 8
1#
#60
0#
#61
b1 &
b1 )
b1 .
#65
b1100 5
b1100 7
b11001100 ,
b11001100 0
b11001100 2
b101 -
b101 /
b101 1
b1 !
b1 *
b1 3
b1 8
b1010 "
b1010 +
b1010 4
b1010 6
1#
#70
0#
#71
b1010 &
b1010 )
b1010 .
#75
b1001 5
b110 7
b10010110 ,
b10010110 0
b10010110 2
b110 -
b110 /
b110 1
b1100 "
b1100 +
b1100 4
b1100 6
b1100 !
b1100 *
b1100 3
b1100 8
1#
#80
0#
#81
0'
#85
b110 5
b1001 7
b1101001 ,
b1101001 0
b1101001 2
b111 -
b111 /
b111 1
b110 !
b110 *
b110 3
b110 8
b1001 "
b1001 +
b1001 4
b1001 6
1#
#90
0#
#91
0$
#95
b110 "
b110 +
b110 4
b110 6
b1001 !
b1001 *
b1001 3
b1001 8
1#
#100
0#
#101
0%
#105
1#
#110
0#
#111
1$
#115
b1001 5
b10011001 ,
b10011001 0
b10011001 2
b1000 -
b1000 /
b1000 1
1#
#120
0#
#121
1%
#125
b110 5
b110 7
b1100110 ,
b1100110 0
b1100110 2
b1001 -
b1001 /
b1001 1
b1001 "
b1001 +
b1001 4
b1001 6
1#
#130
0#
#131
b111001010 &
b111001010 )
b111001010 .
#135
bx 5
bx 7
bx ,
bx 0
bx 2
b1010 -
b1010 /
b1010 1
b110 "
b110 +
b110 4
b110 6
b110 !
b110 *
b110 3
b110 8
1#
#140
0#
#141
b1011 -
b1011 /
b1011 1
1'
#145
b1100 -
b1100 /
b1100 1
bx !
bx *
bx 3
bx 8
bx "
bx +
bx 4
bx 6
1#
#150
0#
#151
b110001001010 &
b110001001010 )
b110001001010 .
#155
b1101 -
b1101 /
b1101 1
1#
#160
0#
#165
b1110 -
b1110 /
b1110 1
1#
#170
0#
#175
b1111 -
b1111 /
b1111 1
1#
#180
0#
#185
b10000 -
b10000 /
b10000 1
1#
#190
0#
#195
b10001 -
b10001 /
b10001 1
1#
#200
0#
